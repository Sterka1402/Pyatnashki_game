(()=>{"use strict";window.addEventListener("load",(()=>{(new class{constructor(){this.tilesWin=[],this.size=4,this.gameWon=!1,this.bindMethods()}bindMethods(){this.createButtons=this.createButtons.bind(this),this.renderBoard=this.renderBoard.bind(this),this.getWinnerTiles=this.getWinnerTiles.bind(this),this.renderTiles=this.renderTiles.bind(this),this.beginGame=this.beginGame.bind(this),this.shuffle=this.shuffle.bind(this),this.moveToEmpty=this.moveToEmpty.bind(this),this.checkTheEndOfGame=this.checkTheEndOfGame.bind(this),this.getSizeGame=this.getSizeGame.bind(this)}getWinnerTiles(){for(let t=1;t<this.boardSize;t++)this.tilesWin.push(t)}createButtons(){this.startGameBtn=document.createElement("BUTTON"),this.startGameBtn.innerHTML="Start new Game",this.startGameBtn.classList.add("start-game"),this.selectSizeGame=document.createElement("SELECT"),this.selectSizeGame.innerHTML="\n      <option disabled selected>Choose size </option>\n      <option value = '3' > 3 x 3 </option>   \n      <option value = '4' > 4 x 4 </option>\n      <option value = '5' > 5 x 5 </option>  \n    ",this.selectSizeGame.classList.add("select-size")}getSizeGame(t){const{value:e}=t.target;this.size=Number(e),this.renderBoard()}renderBoard(){this.gameContainer.innerHTML="",this.boardSizeClass=`board, size${this.size}`,this.boardGame=document.createElement("DIV"),this.boardGame.classList.add("board",`size${this.size}`,"before-start"),this.gameContainer.append(this.startGameBtn,this.selectSizeGame,this.boardGame),this.selectSizeGame.addEventListener("change",this.getSizeGame),this.boardSize=Math.pow(this.size,2),this.tilesWin=[],this.getWinnerTiles(),this.tiles=[...this.tilesWin],this.renderTiles(),this.startGameBtn.addEventListener("click",this.beginGame)}init(){this.gameContainer=document.querySelector(".game-begin"),this.createButtons(),this.renderBoard(),console.log(this.size)}beginGame(){this.gameWon=!1,this.boardGame.classList.remove("before-start"),this.tiles=[...this.tilesWin],this.shuffle(),this.renderTiles()}shuffle(){for(let t=this.boardSize-2;t>0;t--){const e=Math.floor(Math.random()*(t+1)),i=this.tiles[e];this.tiles[e]=this.tiles[t],this.tiles[t]=i}return this.tiles[this.boardSize-1]="",this.tiles}renderTiles(){this.boardGame.innerHTML="",this.tiles.forEach((t=>{new class{constructor(t){this.name=t}render(t){const e=document.createElement("div");e.innerHTML=`${this.name}`,e.classList.add("tiles"),e.setAttribute("data-key",`${this.name}`),""===this.name&&e.classList.add("empty"),t.append(e)}}(t).render(this.boardGame)})),this.boardGame.addEventListener("click",this.moveToEmpty),localStorage.setItem("tiles",JSON.stringify(this.tiles))}moveToEmpty(t){if(!0===this.gameWon)return;const e=t.target;if(e.classList.contains("empty"))return;const i=this.tiles.findIndex((t=>t===Number(e.dataset.key)));if(console.log(i),""===this.tiles[i-1]&&i%this.size!=0){const t=this.tiles[i-1];this.tiles[i-1]=this.tiles[i],this.tiles[i]=t}if(""===this.tiles[i+1]&&(i+1)%this.size!=0){const t=this.tiles[i+1];this.tiles[i+1]=this.tiles[i],this.tiles[i]=t}if(""===this.tiles[i-+this.size]){const t=this.tiles[i-this.size];this.tiles[i-this.size]=this.tiles[i],this.tiles[i]=t}if(""===this.tiles[i+this.size]){const t=this.tiles[i+this.size];this.tiles[i+this.size]=this.tiles[i],this.tiles[i]=t}this.renderTiles(this.tiles),this.checkTheEndOfGame()}checkTheEndOfGame(){const t=[...this.tiles];t.pop(),!0!==this.gameWon&&this.tiles.length===this.boardSize&&JSON.stringify(t)===JSON.stringify(this.tilesWin)&&(this.gameWon=!0,this.boardGame.classList.add("before-start"),setTimeout((()=>alert("You Win!")),0))}}).init()}))})();