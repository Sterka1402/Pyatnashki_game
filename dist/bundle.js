(()=>{"use strict";window.addEventListener("load",(()=>{(new class{constructor(){this.tilesWin=[],this.size=4,this.gameWon=!1,this.countMove=0,this.bindMethods()}bindMethods(){this.checkSaveGame=this.checkSaveGame.bind(this),this.createButtons=this.createButtons.bind(this),this.getSizeGame=this.getSizeGame.bind(this),this.renderBoard=this.renderBoard.bind(this),this.getWinnerTiles=this.getWinnerTiles.bind(this),this.restoreSaveGame=this.restoreSaveGame.bind(this),this.beginGame=this.beginGame.bind(this),this.shuffle=this.shuffle.bind(this),this.renderTiles=this.renderTiles.bind(this),this.moveToEmpty=this.moveToEmpty.bind(this),this.saveGame=this.saveGame.bind(this),this.checkTheEndOfGame=this.checkTheEndOfGame.bind(this)}getWinnerTiles(){this.tilesWin=[];for(let e=1;e<this.boardSize;e++)this.tilesWin.push(e);this.tiles=[...this.tilesWin]}createButtons(){this.startGameBtn=document.createElement("BUTTON"),this.startGameBtn.innerHTML="Start new Game",this.startGameBtn.classList.add("button"),this.selectSizeGame=document.createElement("SELECT"),this.selectSizeGame.innerHTML="\n      <option disabled selected>Choose size </option>\n      <option value = '3' > 3 x 3 </option>   \n      <option value = '4' > 4 x 4 </option>\n      <option value = '5' > 5 x 5 </option>  \n    ",this.selectSizeGame.classList.add("button"),this.saveGameBtn=document.createElement("BUTTON"),this.saveGameBtn.innerHTML="Save game",this.saveGameBtn.classList.add("button","hide"),this.restoreGameBtn=document.createElement("BUTTON"),this.restoreGameBtn.innerHTML="Restore game",this.restoreGameBtn.classList.add("button","hide")}getSizeGame(e){this.saveGameBtn.classList.add("hide");const{value:t}=e.target;this.size=Number(t),this.renderBoard(),this.getWinnerTiles(),this.renderTiles()}renderBoard(){this.gameContainer.innerHTML="",this.boardSizeClass=`board, size${this.size}`,this.boardGame=document.createElement("DIV"),this.boardGame.classList.add("board",`size${this.size}`,"before-start"),this.gameContainer.append(this.startGameBtn,this.selectSizeGame,this.saveGameBtn),this.gameContainer.append(this.restoreGameBtn,this.boardGame),this.selectSizeGame.addEventListener("change",this.getSizeGame),this.boardSize=Math.pow(this.size,2),this.startGameBtn.addEventListener("click",this.beginGame),this.restoreGameBtn.addEventListener("click",this.restoreSaveGame)}checkSaveGame(){JSON.parse(localStorage.getItem("tiles"))&&this.restoreGameBtn.classList.remove("hide")}restoreSaveGame(){this.tiles=JSON.parse(localStorage.getItem("tiles")),this.size=Math.sqrt(this.tiles.length),this.renderBoard(),this.boardGame.classList.remove("before-start"),this.renderTiles()}init(){this.gameContainer=document.querySelector(".game-begin"),this.createButtons(),this.checkSaveGame(),this.renderBoard(),this.getWinnerTiles(),this.renderTiles()}beginGame(){this.gameWon=!1,this.countMove=0,this.boardGame.classList.remove("before-start"),this.getWinnerTiles(),this.tiles=[...this.tilesWin],this.shuffle(),this.renderTiles()}shuffle(){for(let e=this.boardSize-2;e>0;e--){const t=Math.floor(Math.random()*(e+1)),s=this.tiles[t];this.tiles[t]=this.tiles[e],this.tiles[e]=s}return this.tiles[this.boardSize-1]="",this.tiles}renderTiles(){this.boardGame.innerHTML="",this.tiles.forEach((e=>{new class{constructor(e){this.name=e}render(e){const t=document.createElement("div");t.innerHTML=`${this.name}`,t.classList.add("tiles"),t.setAttribute("data-key",`${this.name}`),""===this.name&&t.classList.add("empty"),e.append(t)}}(e).render(this.boardGame)})),this.boardGame.addEventListener("click",this.moveToEmpty)}moveToEmpty(e){if(!0===this.gameWon)return;const t=e.target;if(t.classList.contains("empty"))return;if(!t.classList.contains("tiles"))return;this.restoreGameBtn.classList.add("hide");const s=this.tiles.findIndex((e=>e===Number(t.dataset.key)));if(""===this.tiles[s-1]&&s%this.size!=0){const e=this.tiles[s-1];this.tiles[s-1]=this.tiles[s],this.tiles[s]=e}else if(""===this.tiles[s+1]&&(s+1)%this.size!=0){const e=this.tiles[s+1];this.tiles[s+1]=this.tiles[s],this.tiles[s]=e}else if(""===this.tiles[s-this.size]){const e=this.tiles[s-this.size];this.tiles[s-this.size]=this.tiles[s],this.tiles[s]=e}else if(""===this.tiles[s+this.size]){const e=this.tiles[s+ +this.size];this.tiles[s+ +this.size]=this.tiles[s],this.tiles[s]=e}this.renderTiles(this.tiles),this.checkTheEndOfGame(),this.countMove++,this.saveGameBtn.classList.remove("hide"),this.saveGameBtn.addEventListener("click",this.saveGame)}saveGame(){localStorage.setItem("tiles",JSON.stringify(this.tiles))}checkTheEndOfGame(){const e=[...this.tiles];e.pop(),!0!==this.gameWon&&this.tiles.length===this.boardSize&&JSON.stringify(e)===JSON.stringify(this.tilesWin)&&(this.gameWon=!0,this.boardGame.classList.add("before-start"),setTimeout((()=>alert(`You Win! Your moves: ${this.countMove}`)),0))}}).init()}))})();